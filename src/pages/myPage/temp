import { Injectable } from '@nestjs/common'
import axios from 'axios'
import { User } from './user.entity' // Import your User entity/model

@Injectable()
export class UserService {
  constructor(/* Inject your MySQL repository here */) {}

  async login(code: string): Promise<string> {
    const newToken = await axios.post(
      'https://kauth.kakao.com/oauth/token',
      `grant_type=authorization_code&client_id=${config.kakaoApiKey}&redirect_uri=${config.redirectURI}&code=${code}`,
      {
        headers: {
          'content-type': 'application/x-www-form-urlencoded',
        },
      },
    )

    const accessToken = newToken.data.access_token
    const refreshToken = newToken.data.refresh_token

    const user = await axios.get('https://kapi.kakao.com/v2/user/me', {
      headers: {
        Authorization: `Bearer ${accessToken}`,
      },
    })

    const userData = {
      kakaoId: user.data.id,
      nickname: user.data.kakao_account.profile.nickname,
      email: user.data.kakao_account.email,
    }

    let checkUser = await this.findUserByKakaoId(userData.kakaoId)

    if (!checkUser) {
      checkUser = await this.createUser(userData)
    } else if (checkUser.deletedAt !== null) {
      await this.restoreUser(checkUser.kakaoId)
      checkUser = await this.findUserByKakaoId(userData.kakaoId)
    }

    const jwtToken = this.generateJWTToken(checkUser)
    return jwtToken
  }

  private async findUserByKakaoId(kakaoId: number): Promise<User | null> {
    return await this.userRepository.findOne({ where: { kakaoId } })
  }

  // Create new user
  private async createUser(userData: any): Promise<User> {
    return await this.userRepository.create(userData)
  }

  // Restore user (soft delete revert)
  private async restoreUser(kakaoId: number): Promise<void> {
    await this.userRepository.update({ kakaoId }, { deletedAt: null })
  }

  // Generate JWT token
  private generateJWTToken(user: User): string {
    const payload = { userId: user.id } // You can include more data in the payload if needed
    const secretKey = 'your-secret-key' // Replace with your actual secret key
    const options: jwt.SignOptions = { expiresIn: '1h' } // Token expiration time

    return jwt.sign(payload, secretKey, options)
  }
}
